var searchIndex = new Map(JSON.parse('[\
["cmprsd",{"t":"CCPFGPFGPNONNNNNNNNNHHONNNNNNNHNHNHNNNNONNNNNNNHNNNNNNONNNNNNNNNNNNNNNNNNOOCGPPPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOO","n":["huffman","util","Compressed","CompressedData","CompressionError","DataCannotBeCompressed","Frequency","Huffman","NoDataToCompress","add","bits","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_frequency","build_huffman_tree","bytes_to_direction","character","clone","clone","clone","clone_into","clone_into","clone_into","cmp","combine_nodes","compress","compute_frequencies","decompress","directions_to_string","eq","fmt","fmt","fmt","frequency","from","from","from","from","from_bits_as_u8","get_empty","get_frequency","huffman_tree_to_map","into","into","into","into","is_empty","len","meaningful_bits","pad","partial_cmp","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","compressed_data","frequencies","binary_tree","Direction","Leaf","Left","Node","Right","Tree","borrow","borrow","borrow_mut","borrow_mut","build_internal_node","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","fmt","fmt","from","from","get_all_values","get_frequency","get_value","get_value_from_directions","height","into","into","is_empty","leaf_paths","len","partial_cmp","partial_cmp","to_breadth_first_search","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","content","left","right"],"q":[[0,"cmprsd"],[2,"cmprsd::huffman"],[73,"cmprsd::huffman::Huffman"],[75,"cmprsd::util"],[76,"cmprsd::util::binary_tree"],[120,"cmprsd::util::binary_tree::Tree"],[123,"core::option"],[124,"alloc::vec"],[125,"core::cmp"],[126,"core::cmp"],[127,"core::result"],[128,"alloc::string"],[129,"core::fmt"],[130,"core::fmt"],[131,"core::cmp"],[132,"core::clone"],[133,"core::cmp"]],"i":[0,0,17,0,0,12,0,0,12,1,1,17,1,12,6,17,1,12,6,6,0,0,6,1,12,6,1,12,6,6,0,17,0,17,0,6,12,6,6,6,17,1,12,6,1,1,6,0,17,1,12,6,1,1,1,1,6,1,12,6,6,17,1,12,6,17,1,12,6,17,1,12,6,32,32,0,0,8,10,8,10,0,10,8,10,8,8,10,8,10,8,10,8,10,8,10,8,10,8,8,8,8,8,8,10,8,8,8,8,10,8,8,10,8,10,8,10,8,10,8,33,33,33],"f":"`````````{{bb}d}`{ce{}{}}0000000{{f{j{h}}}l}{{{n{l}}}{{A`{l}}}}{{AbAb}{{Af{Ad}}}}`{bb}{AhAh}{ll}{{ce}d{}{}}00{{ll}Aj}{{{An{{Al{{A`{l}}}}}}}{{An{{Al{{A`{l}}}}}}}}{B`{{Bd{BbAh}}}}{B`{{Af{l}}}}{BbBf}{{{n{Ad}}{A`{l}}}Bf}{{ll}Bh}{{AhBj}Bl}{{lBj}Bl}0`{cc{}}000{{{n{Ab}}}b}{{}b}{lBn}{{}d}{ce{}{}}000{bBh}{bC`}`{{bAb}d}{{ll}{{j{Aj}}}}444{cBf{}}{c{{Bd{e}}}{}{}}0000000{cCb{}}000`````````7777{{c{A`{c}}{A`{c}}}{{A`{c}}}{CdCf}}{AdAd}{{{A`{c}}}{{A`{c}}}{ChCd}}{{ce}d{}{}}0{{AdAd}Aj}{{{A`{c}}{A`{c}}}Aj{CdCf}}{{AdAd}Bh}{{{A`{c}}{A`{c}}}Bh{CjCd}}{{AdBj}Bl}{{{A`{c}}Bj}Bl{ClCd}}{cc{}}0{{{A`{c}}}{{Af{c}}}{CdCf}}{{{A`{l}}}Bn}{{{A`{c}}}c{CdCf}}{{{A`{c}}Ad}{{j{{A`{c}}}}}{CdCf}}{{{A`{c}}}C`{CdCf}}{ce{}{}}0{{{A`{c}}}Bh{CdCf}}{{{A`{c}}}{{Af{{Cn{{Af{Ad}}c}}}}}{CdCf}}3{{AdAd}{{j{Aj}}}}{{{A`{c}}{A`{c}}}{{j{Aj}}}{CdCf}}944{c{{Bd{e}}}{}{}}000{cCb{}}0```","D":"D`","p":[[5,"CompressedData",2],[1,"unit"],[1,"u16"],[1,"char"],[6,"Option",123],[5,"Frequency",2],[1,"slice"],[6,"Tree",76],[1,"u8"],[6,"Direction",76],[5,"Vec",124],[6,"CompressionError",2],[6,"Ordering",125],[5,"Reverse",125],[5,"BinaryHeap",126],[1,"str"],[6,"Huffman",2],[6,"Result",127],[5,"String",128],[1,"bool"],[5,"Formatter",129],[8,"Result",129],[1,"f64"],[1,"usize"],[5,"TypeId",130],[10,"Ord",125],[10,"Copy",131],[10,"Clone",132],[10,"PartialEq",125],[10,"Debug",129],[1,"tuple"],[15,"Compressed",73],[15,"Node",120]],"b":[[37,"impl-Display-for-Frequency"],[38,"impl-Debug-for-Frequency"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAFsADAACAAEACAAAAAwABwAVAAEAGAAHACEAAAAjAAQAMAAAADUAAAA5ACgAZAAEAGsAEAA="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
