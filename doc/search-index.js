var searchIndex = new Map(JSON.parse('[\
["cmprsd",{"t":"CCPFGPFGPNONNNNNNNNNHHONNNNNNNHNHONHNNNNNNNNNNHNNNNNNONNNNNNNNNNNNNNNNNNOOCGPPPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOO","n":["huffman","util","Compressed","CompressedData","CompressionError","DataCannotBeCompressed","Frequency","Huffman","NoDataToCompress","add","bits","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_frequency","build_huffman_tree","bytes_to_direction","character","clone","clone","clone","clone_into","clone_into","clone_into","cmp","combine_nodes","compress","compute_frequencies","count","decompress","directions_to_string","eq","fmt","fmt","fmt","from","from","from","from","from_bits_as_u8","get_empty","huffman_tree_to_map","into","into","into","into","is_empty","len","meaningful_bits","pad","partial_cmp","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","compressed_data","frequencies","binary_tree","Direction","Leaf","Left","Node","Right","Tree","borrow","borrow","borrow_mut","borrow_mut","build_internal_node","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","fmt","fmt","from","from","get_all_values","get_count","get_value","get_value_from_directions","height","into","into","is_empty","leaf_paths","len","partial_cmp","partial_cmp","to_breadth_first_search","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","content","left","right"],"q":[[0,"cmprsd"],[2,"cmprsd::huffman"],[72,"cmprsd::huffman::Huffman"],[74,"cmprsd::util"],[75,"cmprsd::util::binary_tree"],[119,"cmprsd::util::binary_tree::Tree"],[122,"core::option"],[123,"alloc::vec"],[124,"core::cmp"],[125,"core::cmp"],[126,"core::result"],[127,"alloc::string"],[128,"core::fmt"],[129,"core::fmt"],[130,"core::cmp"],[131,"core::clone"],[132,"core::cmp"]],"i":[0,0,17,0,0,12,0,0,12,1,1,17,1,12,6,17,1,12,6,6,0,0,6,1,12,6,1,12,6,6,0,17,0,6,17,0,6,12,6,6,17,1,12,6,1,1,0,17,1,12,6,1,1,1,1,6,1,12,6,6,17,1,12,6,17,1,12,6,17,1,12,6,30,30,0,0,8,10,8,10,0,10,8,10,8,8,10,8,10,8,10,8,10,8,10,8,10,8,8,8,8,8,8,10,8,8,8,8,10,8,8,10,8,10,8,10,8,10,8,31,31,31],"f":"`````````{{bb}d}`{ce{}{}}0000000{{f{j{h}}}l}{{{n{l}}}{{A`{l}}}}{{AbAb}{{Af{Ad}}}}`{bb}{AhAh}{ll}{{ce}d{}{}}00{{ll}Aj}{{{An{{Al{{A`{l}}}}}}}{{An{{Al{{A`{l}}}}}}}}{B`{{Bd{BbAh}}}}{B`{{Af{l}}}}`{BbBf}{{{n{Ad}}{A`{l}}}Bf}{{ll}Bh}{{AhBj}Bl}{{lBj}Bl}0{cc{}}000{{{n{Ab}}}b}{{}b}{{}d}{ce{}{}}000{bBh}{bf}`{{bAb}d}{{ll}{{j{Aj}}}}444{cBf{}}{c{{Bd{e}}}{}{}}0000000{cBn{}}000`````````7777{{c{A`{c}}{A`{c}}}{{A`{c}}}{C`Cb}}{AdAd}{{{A`{c}}}{{A`{c}}}{CdC`}}{{ce}d{}{}}0{{AdAd}Aj}{{{A`{c}}{A`{c}}}Aj{C`Cb}}{{AdAd}Bh}{{{A`{c}}{A`{c}}}Bh{CfC`}}{{AdBj}Bl}{{{A`{c}}Bj}Bl{ChC`}}{cc{}}0{{{A`{c}}}{{Af{c}}}{C`Cb}}{{{A`{l}}}f}{{{A`{c}}}c{C`Cb}}{{{A`{c}}Ad}{{j{{A`{c}}}}}{C`Cb}}{{{A`{c}}}f{C`Cb}}{ce{}{}}0{{{A`{c}}}Bh{C`Cb}}{{{A`{c}}}{{Af{{Cj{{Af{Ad}}c}}}}}{C`Cb}}3{{AdAd}{{j{Aj}}}}{{{A`{c}}{A`{c}}}{{j{Aj}}}{C`Cb}}944{c{{Bd{e}}}{}{}}000{cBn{}}0```","D":"Cn","p":[[5,"CompressedData",2],[1,"unit"],[1,"usize"],[1,"char"],[6,"Option",122],[5,"Frequency",2],[1,"slice"],[6,"Tree",75],[1,"u8"],[6,"Direction",75],[5,"Vec",123],[6,"CompressionError",2],[6,"Ordering",124],[5,"Reverse",124],[5,"BinaryHeap",125],[1,"str"],[6,"Huffman",2],[6,"Result",126],[5,"String",127],[1,"bool"],[5,"Formatter",128],[8,"Result",128],[5,"TypeId",129],[10,"Ord",124],[10,"Copy",130],[10,"Clone",131],[10,"PartialEq",124],[10,"Debug",128],[1,"tuple"],[15,"Compressed",72],[15,"Node",119]],"b":[[38,"impl-Display-for-Frequency"],[39,"impl-Debug-for-Frequency"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAFsADAACAAEACAAAAAwABwAVAAEAGAAHACEAAAAkAAQALwAAADQAAAA4ACgAYwAEAGoAEAA="}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
